<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta property="og:description" content="问题：为2亿用户规模的网站设计一种算法，在每次用户登录时显示其当前积分排名。本文介绍了一种树形分区设计，它具有几种优点：1. 分区结构稳定，不受积分分布影响；2. 每次查询或更新的复杂度为积分最大值的" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>海量用户积分排名算法探讨 - Todd Wei - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=BKtyzabbeYJEVOaELkxmRjHbp7LT-v37GzrU5S24bJk" />
    <link id="MainCss" rel="stylesheet" href="/skins/simpleclear/bundle-simpleclear.min.css?v=IiBSeUvh0y1hLfcJsciURz9X2PcgCGcGfOyKtwwvZ00" />
    <link type="text/css" rel="stylesheet" href="https://www.cnblogs.com/weidagang2046/custom.css?v=s74&#x2B;XDZDHMwgqqExjA7xUk/10rY=" />
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/simpleclear/bundle-simpleclear-mobile.min.css?v=DidnFOvv24-VeVpMoJxhxZWs9iNA_ZwNuLjfe3iZZR8" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/weidagang2046/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/weidagang2046/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/weidagang2046/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=VSP5rTXbJNpNidklGdgoLgwCGyUPITrcsmlgoaMKz3w"></script>
    <script>
        var currentBlogId = 36931;
        var currentBlogApp = 'weidagang2046';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var skinName = 'SimpleClear';
    </script>
    
    
    
</head>
<body>
    <a name="top"></a>
    
    <div id="main">
    <div id="header">
        
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/weidagang2046/">Programming.log - a place to keep my thoughts on programming</a>
</h1>
<p id="tagline">

</p>


    </div>
    <div id="post_detail">
<div class="post">
    <h2 class="postTitle">
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/weidagang2046/archive/2012/03/01/massive-user-ranking.html">海量用户积分排名算法探讨</a>
</h2>
    <div class="postText">
    <div id="cnblogs_post_description" style="display: none">
        问题：为2亿用户规模的网站设计一种算法，在每次用户登录时显示其当前积分排名。本文介绍了一种树形分区设计，它具有几种优点：1. 分区结构稳定，不受积分分布影响；2. 每次查询或更新的复杂度为积分最大值的log(n)级别，且与用户规模无关，可以应对海量规模；3. 不依赖于SQL，容易改造为NoSQL等其他存储方式。
    </div>
<div id="cnblogs_post_body" class="blogpost-body ">
    <h3>问题</h3>
<p>某海量用户网站，用户拥有积分，积分可能会在使用过程中随时更新。现在要为该网站设计一种算法，在每次用户登录时显示其当前积分排名。用户最大规模为2亿；积分为非负整数，且小于100万。</p>
<p>PS: 据说这是迅雷的一道面试题，不过问题本身具有很强的真实性，所以本文打算按照真实场景来考虑，而不局限于面试题的理想环境。</p>
<h3>存储结构</h3>
<p>首先，我们用一张用户积分表user_score来保存用户的积分信息。</p>
<p>表结构：</p>
<p><img src="https://images.cnblogs.com/cnblogs_com/weidagang2046/359580/r_user_score_schema.png" alt="user<em />score</em>schema" title="" /></p>
<p>示例数据：</p>
<p><img src="https://images.cnblogs.com/cnblogs_com/weidagang2046/359580/r_user_score_sample.png" alt="user<em />score</em>sample" title="" /></p>
<p>下面的算法会基于这个基本的表结构来进行。</p>
<h3>算法1：简单SQL查询</h3>
<p>首先，我们很容易想到用一条简单的SQL语句查询出积分大于该用户积分的用户数量：</p>
<pre><code>select 1 + count(t2.uid) as rank
from user_score t1, user_score t2
where t1.uid = @uid and t2.score &gt; t1.score
</code></pre>
<p>对于4号用户我们可以得到下面的结果：</p>
<p><img src="https://images.cnblogs.com/cnblogs_com/weidagang2046/359580/o_sql.png" alt="sql_1" title="" /></p>
<p>算法特点</p>
<p>优点：简单，利用了SQL的功能，不需要复杂的查询逻辑，也不引入额外的存储结构，对小规模或性能要求不高的应用不失为一种良好的解决方案。</p>
<p>缺点：需要对user_score表进行全表扫描，还需要考虑到查询的同时若有积分更新会对表造成锁定，在海量数据规模和高并发的应用中，性能是无法接受的。</p>
<h3>算法2：均匀分区设计</h3>
<p>在许多应用中缓存是解决性能问题的重要途径，我们自然会想能不能把用户排名用Memcached缓存下来呢？不过再一想发现缓存似乎帮不上什么忙，因为用户排名是一个全局性的统计性指标，而并非用户的私有属性，其他用户的积分变化可能会马上影响到本用户的排名。然而，真实的应用中积分的变化其实也是有一定规律的，通常一个用户的积分不会突然暴增暴减，一般用户总是要在低分区混迹很长一段时间才会慢慢升入高分区，也就是说用户积分的分布总体说来是有区段的，我们进一步注意到高分区用户积分的细微变化其实对低分段用户的排名影响不大。于是，我们可以想到按积分区段进行统计的方法，引入一张分区积分表score_range：</p>
<p>表结构：</p>
<p><img src="https://images.cnblogs.com/cnblogs_com/weidagang2046/359580/r_score_range_schema.png" alt="score<em />range</em>schema" title="" /></p>
<p>数据示例：</p>
<p><img src="https://images.cnblogs.com/cnblogs_com/weidagang2046/359580/r_score_range_sample.png" alt="score<em />range</em>sample" title="" /></p>
<p>表示[from_score, to_score)区间有count个用户。若我们按每1000分划分一个区间则有[0, 1000), [1000, 2000), &#8230;, [999000, 1000000)这1000个区间，以后对用户积分的更新要相应地更新score_range表的区间值。在分区积分表的辅助下查询积分为s的用户的排名，可以首先确定其所属区间，把高于s的积分区间的count值累加，然后再查询出该用户在本区间内的排名，二者相加即可获得用户的排名。</p>
<p>乍一看，这个方法貌似通过区间聚合减少了查询计算量，实则不然。最大的问题在于如何查询用户在本区间内的排名呢？如果是在算法1中的SQL中加上积分条件：</p>
<pre><code>select 1 + count(t2.uid) as rank
from user_score t1, user_score t2
where t1.uid = @uid and t2.score &gt; t1.score and t2.score &lt; @to_score
</code></pre>
<p>在理想情况下，由于把t2.score的范围限制在了1000以内，如果对score字段建立索引，我们期望本条SQL语句将通过索引大大减少扫描的user_score表的行数。不过真实情况并非如此，t2.score的范围在1000以内并不意味着该区间内的用户数也是1000，因为这里有积分相同的情况存在！二八定律告诉我们，前20%的低分区往往集中了80%的用户，这就是说对于大量低分区用户进行区间内排名查询的性能远不及对少数的高分区用户，所以在一般情况下这种分区方法不会带来实质性的性能提升。</p>
<p>算法特点</p>
<p>优点：注意到了积分区间的存在，并通过预先聚合消除查询的全表扫描。</p>
<p>缺点：积分非均匀分布的特点使得性能提升并不理想。</p>
<h3>算法3：树形分区设计</h3>
<p>均匀分区查询算法的失败是由于积分分布的非均匀性，那么我们自然就会想，能不能按二八定律，把score_range表设计为非均匀区间呢？比如，把低分区划密集一点，10分一个区间，然后逐渐变成100分，1000分，10000分 &#8230; 当然，这不失为一种方法，不过这种分法有一定的随意性，不容易把握好，而且整个系统的积分分布会随着使用而逐渐发生变化，最初的较好的分区方法可能会变得不适应未来的情况了。我们希望找到一种分区方法，既可以适应积分非均匀性，又可以适应系统积分分布的变化，这就是树形分区。</p>
<p>我们可以把[0, 1,000,000)作为一级区间；再把一级区间分为两个2级区间[0, 500,000), [500,000, 1,000,000)，然后把二级区间二分为4个3级区间[0, 250,000), [250,000, 500,000), [500,000, 750,000), [750,000, 1,000,000)，依此类推，最终我们会得到1,000,000个21级区间[0,1), [1,2) &#8230; [999,999, 1,000,000)。这实际上是把区间组织成了一种平衡二叉树结构，根结点代表一级区间，每个非叶子结点有两个子结点，左子结点代表低分区间，右子结点代表高分区间。树形分区结构需要在更新时保持一种不变量(Invariant)：非叶子结点的count值总是等于其左右子结点的count值之和。</p>
<p><img src="https://images.cnblogs.com/cnblogs_com/weidagang2046/359580/r_ranking_tree.png" alt="range_tree" title="" /></p>
<p>以后，每次用户积分有变化所需要更新的区间数量和积分变化量有关系，积分变化越小更新的区间层次越低。总体上，每次所需要更新的区间数量是用户积分变量的log(n)级别的，也就是说如果用户积分一次变化在百万级，更新区间的数量在二十这个级别。在这种树形分区积分表的辅助下查询积分为s的用户排名，实际上是一个在区间树上由上至下、由粗到细一步步明确s所在位置的过程。比如，对于积分499,000，我们用一个初值为0的排名变量来做累加；首先，它属于1级区间的左子树[0, 500,000)，那么该用户排名应该在右子树[500,000, 1,000,000)的用户数count之后，我们把该count值累加到该用户排名变量，进入下一级区间；其次，它属于3级区间的[250,000, 500,000)，这是2级区间的右子树，所以不用累加count到排名变量，直接进入下一级区间；再次，它属于4级区间的&#8230;；直到最后我们把用户积分精确定位在21级区间[499,000, 499,001)，整个累加过程完成，得出排名！</p>
<p>虽然，本算法的更新和查询都涉及到若干个操作，但如果我们为区间的from_score和to_score建立索引，这些操作都是基于键的查询和更新，不会产生表扫描，因此效率更高。另外，本算法并不依赖于关系数据模型和SQL运算，可以轻易地改造为NoSQL等其他存储方式，而基于键的操作也很容易引入缓存机制进一步优化性能。进一步，我们可以估算一下树形区间的数目大约为2,000,000，考虑每个结点的大小，整个结构只占用几十M空间。所以，我们完全可以在内存建立区间树结构，并通过user_score表在O(n)的时间内初始化区间树，然后排名的查询和更新操作都可以在内存进行。一般来讲，同样的算法，从数据库到内存算法的性能提升常常可以达到10^5以上；因此，本算法可以达到非常高的性能。</p>
<p>算法特点</p>
<p>优点：结构稳定，不受积分分布影响；每次查询或更新的复杂度为积分最大值的O(log(n))级别，且与用户规模无关，可以应对海量规模；不依赖于SQL，容易改造为NoSQL或内存数据结构。</p>
<p>缺点：算法相对更复杂。</p>
<h3>算法4：积分排名数组</h3>
<p>算法3虽然性能较高，达到了积分变化的O(log(n))的复杂度，但是实现上比较复杂。另外，O(log(n))的复杂度只在n特别大的时候才显出它的优势，而实际应用中积分的变化情况往往不会太大，这时和O(n)的算法相比往往没有明显的优势，甚至可能更慢。</p>
<p>考虑到这一情况，仔细观察一下积分变化对排名的具体影响，可以发现某用户的积分从s变为s+n，积分小于s或者大于等于s+n的其他用户排名实际上并不会受到影响，只有积分在[s,s+n)区间内的用户排名会下降1位。我们可以用于一个大小为1,000,000的数组表示积分和排名的对应关系，其中rank[s]表示积分s所对应的排名。初始化时，rank数组可以由user_score表在O(n)的复杂度内计算而来。用户排名的查询和更新基于这个数组来进行。查询积分s所对应的排名直接返回rank[s]即可，复杂度为O(1)；当用户积分从s变为s+n，只需要把rank[s]到rank[s+n-1]这n个元素的值增加1即可，复杂度为O(n)。</p>
<p>算法特点</p>
<p>优点：积分排名数组比区间树更简单，易于实现；排名查询复杂度为O(1)；排名更新复杂度O(n)，在积分变化不大的情况下非常高效。</p>
<p>缺点：当n比较大时，需要更新大量元素，效率不如算法3。</p>
<h3>总结</h3>
<p>上面介绍了用户积分排名的几种算法，算法1简单易于理解和实现，适用于小规模和低并发应用；算法3引入了更复杂的树形分区结构，但是O(log(n))的复杂度性能优越，可以应用于海量规模和高并发；算法4采用简单的排名数组，易于实现，在积分变化不大的情况下性能不亚于算法3。本问题是一个开放性的问题，相信一定还有其他优秀的算法和解决方案，欢迎探讨！</p>

</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div></div>
    <p class="postfoot">posted on 
<span id="post-date">2012-03-01 10:05</span>&nbsp;
<a href="https://www.cnblogs.com/weidagang2046/">Todd Wei</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=2375081" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(2375081);return false;">收藏</a></p>
</div>


<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 36931, cb_blogApp = 'weidagang2046', cb_blogUserGuid = 'b939420b-63cf-dd11-9e4d-001cf0cd104b';
    var cb_entryId = 2375081, cb_entryCreatedDate = '2012-03-01 10:05', cb_postType = 1; 
    loadViewCount(cb_entryId);
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;">
            <script>
                if (new Date() >= new Date(2018, 9, 13)) {
                    googletag.cmd.push(function () { googletag.display("div-gpt-ad-1539008685004-0"); });
                }
            </script>
        </div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div></div>


</div>
<div id="rightmenu">
    
<div id="my_links">
<h3>导航</h3>
<ul>
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/weidagang2046/">
首页</a>
</li>

<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/Todd%20Wei">
联系</a></li>
<li>
<a id="blog_nav_rss" class="menu" href="https://www.cnblogs.com/weidagang2046/rss/">
订阅</a></li><!--<partial name="./Shared/_XmlLink.cshtml" model="Model" />-->
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>
</div>


    <div id="calendar">
        <div id="blog-calendar" style="display: none"></div>
    </div>
    <script>loadBlogDefaultCalendar();</script>
    
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

    <div id="blog_stats">
<h3>统计</h3>
<ul>
<li>随笔 - 
65</li>
<li>文章 - 
44</li>
<li>评论 - 
1212
<!--<li>引用 - <partial name="./Shared/_PingTrackCount.cshtml" model="BlogServer.Web.Models.DetailBlogPage" />-->
</li>
</ul>
</div>


    <div id="blog-sidecolumn"></div>
    <script>loadBlogSideColumn();</script>
    <div id="footer">
	Powered by: 
	<br />
	
	
<a href="https://www.cnblogs.com/" id="Footer1_Hyperlink3" style="font-size: 12px; font-family: Verdana">博客园</a>
	<br />
	Copyright &copy; 2020 Todd Wei
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>

</div>


</div>
    
</body>
</html>